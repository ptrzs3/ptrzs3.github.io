<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Rust on Galaxy</title>
    <link>https://ptrzs3.github.io/tags/rust/</link>
    <description>Recent content in Rust on Galaxy</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Tue, 12 Mar 2024 19:20:44 +0800</lastBuildDate><atom:link href="https://ptrzs3.github.io/tags/rust/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Rc and Arc in Rust</title>
      <link>https://ptrzs3.github.io/posts/rc-and-arc-in-rust/</link>
      <pubDate>Tue, 12 Mar 2024 19:20:44 +0800</pubDate>
      
      <guid>https://ptrzs3.github.io/posts/rc-and-arc-in-rust/</guid>
      <description>解决的问题Link to headingRc即Reference Counter，引用计数器，Arc即Atomic Reference Counter，两者唯一的区别是Arc可以在线程之间安全地进行传递（有性能代价）。
对于程序中的某个值，它最完美的被释放时机就是用完之后立即释放内存，也就是只需要存续到每个人都用完它就好。Rc就做这样的事情：确保引用在所有人都用完之后释放它，而且使用者不需要担心出现无法被追踪的引用或者忘记引用计数，这些都交给Rc来处理。
用例Link to headinguse std::rc::Rc; fn main() { let S = String::from(&amp;#34;Hello&amp;#34;); let mut rc = Rc::new(S); // 创建rc let p = rc.clone(); // 克隆一个引用 println!(&amp;#34;ref counter = {:?}&amp;#34;, Rc::strong_count(&amp;amp;rc)); // ref counter = 2 // rc指针拥有的值是不可变的，因此不可直接调用String的可变方法 // 通过全局方法获取rc的可变引用并解引用重新赋值，前提是ref counter == 1 // 若p存在，则下面方法会panic *Rc::get_mut(&amp;amp;mut rc).unwrap() = String::from(&amp;#34;World&amp;#34;); println!(&amp;#34;{:?}&amp;#34;, rc); // rc包裹的值为&amp;#34;World&amp;#34; } </description>
    </item>
    
    <item>
      <title>Cell and RefCell in Rust</title>
      <link>https://ptrzs3.github.io/posts/cell-and-refcell-in-rust/</link>
      <pubDate>Tue, 12 Mar 2024 17:15:34 +0800</pubDate>
      
      <guid>https://ptrzs3.github.io/posts/cell-and-refcell-in-rust/</guid>
      <description>参考文档：《Rust语言圣经》，《Rust程序设计（第2版）》
Cell和RefCell要解决的问题Link to heading对于Cell和RefCell所要解决的问题，上述两本资料解释不同，但含义相同：前者说 ”Rust 提供了 Cell 和 RefCell 用于内部可变性，简而言之，可以在拥有不可变引用的同时修改目标数据“；后者说”我们需要一个不可变值中的一丁点儿可变数据。……。Rust提供了多种可选方案，本节将讨论最直观的类型，即Cell&amp;lt;T&amp;gt;和RefCell&amp;lt;T&amp;gt;，……“。
我认为后者的解释更形象一点：对于某个大型的结构体，在运行时不需要对其做非常多的改动，只是需要偶尔改动其某个字段，并且无法将此结构体声明为mut类型，而只是拥有该结构体的不可变引用。在这种场景下，若需要对该结构体的不可变引用进行可变，则可以用Cell或RefCell解决。
需要注意的是，Cell和RefCell包裹的数据具有内部可变性，但这并不说明不可变引用和可变引用同时存在，也就是说并不能绕过Rust的所有权规则，尽管在编译时不会报错，但在运行时肯定会panic。
Cell和RefCell的异同Link to headingCell包裹的数据必须实现Copy trait，而RefCell并没有此限制。
Cell的get方法可以返回数据的拷贝，而RefCell的borrow方法返回数据的引用
// Cell，Cell包裹的数据都实现了Copy trait pub fn get(&amp;amp;self) -&amp;gt; T // RefCell，其中的Ref也暗示了返回引用 pub fn borrow(&amp;amp;self) -&amp;gt; Ref&amp;lt;&amp;#39;_, T&amp;gt; Cell不会panic，而RefCell会
用例Link to headinguse std::cell::Cell; pub struct Controller { …… counter: Cell&amp;lt;u32&amp;gt;, …… } impl Controller { …… fn counter_up(&amp;amp;self) { // 传入参数是不可变引用，而可通过Cell的特性实现可变 let n = self.counter.get(); self.counter.set(n + 1); } …… } use std::cell::RefCell; pub struct Library { …… log: RefCell&amp;lt;File&amp;gt;, …… } impl Library { …… fn logger(&amp;amp;self, msg: &amp;amp;str) { let mut log_file = self.</description>
    </item>
    
    <item>
      <title>Cow相关内容</title>
      <link>https://ptrzs3.github.io/posts/cow/</link>
      <pubDate>Fri, 08 Mar 2024 19:30:53 +0800</pubDate>
      
      <guid>https://ptrzs3.github.io/posts/cow/</guid>
      <description>Cow相关Link to headingRelated traitsLink to headingBorrowLink to headingpub trait Borrow&amp;lt;T&amp;gt; where T: ?Sized, { // Required method fn borrow(&amp;amp;self) -&amp;gt; &amp;amp;T; } BorrowMutLink to heading// 要求实现BorrowMut的类型必须先实现Borrow pub trait BorrowMut&amp;lt;Borrowed&amp;gt;: Borrow&amp;lt;Borrowed&amp;gt; where Borrowed: ?Sized, { // Required method fn borrow_mut(&amp;amp;mut self) -&amp;gt; &amp;amp;mut Borrowed; } trait继承：要求实现BorrowMut trait的类型也必须实现Borrow trait。trait继承是rust支持的唯一一种继承
ToOwnedLink to headingpub trait ToOwned { // 不是为类型起别名，而是要求Owned类型必须实现Borrow trait type Owned: Borrow&amp;lt;Self&amp;gt;; // Required method fn to_owned(&amp;amp;self) -&amp;gt; Self::Owned; // Provided method fn clone_into(&amp;amp;self, target: &amp;amp;mut Self::Owned) { .</description>
    </item>
    
    <item>
      <title>String、&amp;String、str和&amp;str</title>
      <link>https://ptrzs3.github.io/posts/string%E7%9B%B8%E5%85%B3/</link>
      <pubDate>Fri, 08 Mar 2024 09:28:53 +0800</pubDate>
      
      <guid>https://ptrzs3.github.io/posts/string%E7%9B%B8%E5%85%B3/</guid>
      <description>String、&amp;amp;String、str和&amp;amp;str简析Link to headingstrLink to headingstr是primitive type，即原始类型，是Rust语言级别上的唯一一种字符串类型。
str类型也称为字符串切片，常以其引用的形式&amp;amp;str出现（也就是字符串字面量，即&amp;amp;&#39;static str）。
Q：既然是static生命周期，为什么在结构体中还需要标注生命周期呢？
圣经：在存在多个引用时，编译器有时会无法自动推导生命周期，此时就需要我们手动去标注，通过为参数标注合适的生命周期来帮助编译器进行借用检查的分析。
str类型是动态尺寸类型（Dynamic Size Type），Rust中所有切片都是DST，包括[u8]，再推广为[T]。和u32类型对比，一个u32类型无论数值在u32允许的范围之间如何变化，u32占用的内存都是4字节，因此u32类型是定长类型，原则上是存放在栈区。而对于str，看下面这样的代码：
let str_a: &amp;amp;str = &amp;#34;Hello&amp;#34;; let str_b: &amp;amp;str = &amp;#34;I Love Rust&amp;#34;; 上述代码中，str_a的长度是5个字节，str_b的长度是11个字节，他们同属str类型，而因为赋值不同导致占用内存空间不同，因此说str是动态尺寸类型，无法存放在栈上。因此，使用str类型时，更多地是使用&amp;amp;str，也就是它的引用，也称为字符串切片的引用，但我们习惯直接称其为字符串切片。
但是出于方便，我们往往不会说使用切片引用，而是直接说使用字符串切片或数组切片，实际上，这时指代的都是切片的引用！（原文出处）
&amp;amp;strLink to heading引用一般是长度已知的，原则上是存放在栈区（目前还没有发现引用时DST的）。
&amp;amp;str 由两个部分组成：一个指向某些字节的指针和一个长度（查看原文）。
String和&amp;amp;StringLink to heading#[derive(PartialEq, PartialOrd, Eq, Ord)] #[stable(feature = &amp;#34;rust1&amp;#34;, since = &amp;#34;1.0.0&amp;#34;)] #[cfg_attr(not(test), lang = &amp;#34;String&amp;#34;)] pub struct String { vec: Vec&amp;lt;u8&amp;gt;, } String并不是Rust核心库的，只是标准库中一个公开的结构体。
在某些函数签名中使用&amp;amp;String类型（String的引用类型），建议更改为&amp;amp;str类型。
fn main() { let bar: String = String::from(&amp;#34;Hello&amp;#34;); foo(&amp;amp;bar); // Ok let baz: &amp;amp;str = &amp;#34;Hello&amp;#34;; foo(baz); // Error } fn foo(_: &amp;amp;String) {} // 将foo的签名改为&amp;amp;str，则baz也可以传递 // fn foo(_: &amp;amp;str) {} 通过上述代码，可以知道&amp;amp;String和&amp;amp;str是不等价的，且&amp;amp;str不能转换为&amp;amp;String，但&amp;amp;String却可以自动Deref为&amp;amp;str。</description>
    </item>
    
    <item>
      <title>Rust中的借用、引用与解引用</title>
      <link>https://ptrzs3.github.io/posts/rust%E4%B8%AD%E7%9A%84%E5%80%9F%E7%94%A8%E5%92%8C%E5%BC%95%E7%94%A8/</link>
      <pubDate>Fri, 08 Mar 2024 09:17:23 +0800</pubDate>
      
      <guid>https://ptrzs3.github.io/posts/rust%E4%B8%AD%E7%9A%84%E5%80%9F%E7%94%A8%E5%92%8C%E5%BC%95%E7%94%A8/</guid>
      <description>Rust中的借用、引用和解引用Link to heading标准库的介绍：https://rustwiki.org/zh-CN/std/keyword.ref.html（译文）| https://doc.rust-lang.org/std/keyword.ref.html （原版，有能力推荐读这个）
Rust book的介绍：https://rustwiki.org/zh-CN/book/ch04-02-references-and-borrowing.html
我们将创建一个引用的行为称为 借用（borrowing）
ref indicates that you want a reference to an unpacked value. （我理解为ref产出一个引用）
Case 0Link to heading// rustwiki: 我们将创建一个引用的行为称为 **借用**（*borrowing*） // 个人认为：在参数传递时，称其为引用或者借用都可 // 引用不侵占所有权，不变更数据的所有者 fn main() { let mut number: i32 = 5; flip(&amp;amp;mut number); println!(&amp;#34;number = {}&amp;#34;, number); } fn flip(para: &amp;amp;mut i32) { *para = -*para; } Case 1Link to headinglet ref a = 5; // &amp;amp;i32 let b = &amp;amp;5; // i32 assert_eq!</description>
    </item>
    
    <item>
      <title>Rust里的小东西</title>
      <link>https://ptrzs3.github.io/posts/rust%E9%87%8C%E7%9A%84%E5%B0%8F%E4%B8%9C%E8%A5%BF/</link>
      <pubDate>Wed, 18 Oct 2023 21:28:06 +0800</pubDate>
      
      <guid>https://ptrzs3.github.io/posts/rust%E9%87%8C%E7%9A%84%E5%B0%8F%E4%B8%9C%E8%A5%BF/</guid>
      <description>Rust中常用的小东西Link to headingResultLink to heading在不同的模块中有不同的Result定义，但都是std::result::Result的包装。
std::result::ResultLink to headingpub enum Result&amp;lt;T, E&amp;gt; { Ok(T), Err(E), } std::io::ResultLink to headingpub type Result&amp;lt;T&amp;gt; = Result&amp;lt;T, Error&amp;gt;; 其中Error：
pub struct Error { repr: Repr, } std::fmt::ResultLink to headingpub type Result = Result&amp;lt;(), Error&amp;gt;; 其中Error：
pub struct Error; std::thread::ResultLink to headingpub type Result&amp;lt;T&amp;gt; = Result&amp;lt;T, Box&amp;lt;dyn Any + Send + &amp;#39;static&amp;gt;&amp;gt;; ErrorLink to headingstd::error::ErrorLink to headingpub trait Error: Debug + Display { fn source(&amp;amp;self) -&amp;gt; Option&amp;lt;&amp;amp;(dyn Error + &amp;#39;static)&amp;gt; { .</description>
    </item>
    
    <item>
      <title>Rust命令行解析程序：Clap</title>
      <link>https://ptrzs3.github.io/posts/clap/</link>
      <pubDate>Fri, 13 Oct 2023 20:54:44 +0800</pubDate>
      
      <guid>https://ptrzs3.github.io/posts/clap/</guid>
      <description>Rust命令行解析程序：ClapLink to heading基于Clap 4.4.6
参考资料：Clap官方手册
Chapter 1Link to heading配置解析器Link to heading使用Command结构体的new方法构建解析器：
// arg.exe use clap::{arg, Command}; fn main() { // 只要调用clap解析命令行参数，--help和--version会自动添加到命令行参数列表中 // 使用arg!宏定义了两个命令行参数：two, one let matches = Command::new(&amp;#34;MyApp&amp;#34;) .version(&amp;#34;1.0&amp;#34;) .author(&amp;#34;Kevin K. &amp;lt;kbknapp@gmail.com&amp;gt;&amp;#34;) .about(&amp;#34;Does awesome things&amp;#34;) .arg(arg!(--two &amp;lt;VALUE&amp;gt;).required(true)) .arg(arg!(--one &amp;lt;VALUE&amp;gt;).required(true)) .get_matches(); println!( &amp;#34;two: {:?}&amp;#34;, matches.get_one::&amp;lt;String&amp;gt;(&amp;#34;two&amp;#34;).expect(&amp;#34;required&amp;#34;) ); println!( &amp;#34;one: {:?}&amp;#34;, matches.get_one::&amp;lt;String&amp;gt;(&amp;#34;one&amp;#34;).expect(&amp;#34;required&amp;#34;) ); } 用法：
arg.exe --two foo --one bar：两个参数分别对应foo和bar arg.exe -h 或 arg.exe --help：输出帮助信息 arg.exe -v 或 arg.</description>
    </item>
    
  </channel>
</rss>
