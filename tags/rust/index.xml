<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Rust on Galaxy</title>
    <link>https://ptrzs3.github.io/tags/rust/</link>
    <description>Recent content in Rust on Galaxy</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 18 Oct 2023 21:28:06 +0800</lastBuildDate><atom:link href="https://ptrzs3.github.io/tags/rust/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Rust里的小东西</title>
      <link>https://ptrzs3.github.io/posts/rust%E9%87%8C%E7%9A%84%E5%B0%8F%E4%B8%9C%E8%A5%BF/</link>
      <pubDate>Wed, 18 Oct 2023 21:28:06 +0800</pubDate>
      
      <guid>https://ptrzs3.github.io/posts/rust%E9%87%8C%E7%9A%84%E5%B0%8F%E4%B8%9C%E8%A5%BF/</guid>
      <description>Rust中常用的小东西Link to headingResultLink to heading在不同的模块中有不同的Result定义，但都是std::result::Result的包装。
std::result::ResultLink to headingpub enum Result&amp;lt;T, E&amp;gt; { Ok(T), Err(E), } std::io::ResultLink to headingpub type Result&amp;lt;T&amp;gt; = Result&amp;lt;T, Error&amp;gt;; 其中Error：
pub struct Error { repr: Repr, } std::fmt::ResultLink to headingpub type Result = Result&amp;lt;(), Error&amp;gt;; 其中Error：
pub struct Error; std::thread::ResultLink to headingpub type Result&amp;lt;T&amp;gt; = Result&amp;lt;T, Box&amp;lt;dyn Any + Send + &amp;#39;static&amp;gt;&amp;gt;; ErrorLink to headingstd::error::ErrorLink to headingpub trait Error: Debug + Display { fn source(&amp;amp;self) -&amp;gt; Option&amp;lt;&amp;amp;(dyn Error + &amp;#39;static)&amp;gt; { .</description>
    </item>
    
    <item>
      <title>Rust命令行解析程序：Clap</title>
      <link>https://ptrzs3.github.io/posts/clap/</link>
      <pubDate>Fri, 13 Oct 2023 20:54:44 +0800</pubDate>
      
      <guid>https://ptrzs3.github.io/posts/clap/</guid>
      <description>Rust命令行解析程序：ClapLink to heading基于Clap 4.4.6
参考资料：Clap官方手册
Chapter 1Link to heading配置解析器Link to heading使用Command结构体的new方法构建解析器：
// arg.exe use clap::{arg, Command}; fn main() { // 只要调用clap解析命令行参数，--help和--version会自动添加到命令行参数列表中 // 使用arg!宏定义了两个命令行参数：two, one let matches = Command::new(&amp;#34;MyApp&amp;#34;) .version(&amp;#34;1.0&amp;#34;) .author(&amp;#34;Kevin K. &amp;lt;kbknapp@gmail.com&amp;gt;&amp;#34;) .about(&amp;#34;Does awesome things&amp;#34;) .arg(arg!(--two &amp;lt;VALUE&amp;gt;).required(true)) .arg(arg!(--one &amp;lt;VALUE&amp;gt;).required(true)) .get_matches(); println!( &amp;#34;two: {:?}&amp;#34;, matches.get_one::&amp;lt;String&amp;gt;(&amp;#34;two&amp;#34;).expect(&amp;#34;required&amp;#34;) ); println!( &amp;#34;one: {:?}&amp;#34;, matches.get_one::&amp;lt;String&amp;gt;(&amp;#34;one&amp;#34;).expect(&amp;#34;required&amp;#34;) ); } 用法：
arg.exe --two foo --one bar：两个参数分别对应foo和bar arg.exe -h 或 arg.exe --help：输出帮助信息 arg.exe -v 或 arg.</description>
    </item>
    
  </channel>
</rss>
