<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ptrzs on Galaxy</title>
    <link>https://ptrzs3.github.io/authors/ptrzs/</link>
    <description>Recent content in ptrzs on Galaxy</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 13 Mar 2024 10:52:03 +0800</lastBuildDate><atom:link href="https://ptrzs3.github.io/authors/ptrzs/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Makefile</title>
      <link>https://ptrzs3.github.io/posts/makefile/</link>
      <pubDate>Wed, 13 Mar 2024 10:52:03 +0800</pubDate>
      
      <guid>https://ptrzs3.github.io/posts/makefile/</guid>
      <description>目标
默认是第一个目标</description>
    </item>
    
    <item>
      <title>Rc and Arc in Rust</title>
      <link>https://ptrzs3.github.io/posts/rc-and-arc-in-rust/</link>
      <pubDate>Tue, 12 Mar 2024 19:20:44 +0800</pubDate>
      
      <guid>https://ptrzs3.github.io/posts/rc-and-arc-in-rust/</guid>
      <description>解决的问题Link to headingRc即Reference Counter，引用计数器，Arc即Atomic Reference Counter，两者唯一的区别是Arc可以在线程之间安全地进行传递（有性能代价）。
对于程序中的某个值，它最完美的被释放时机就是用完之后立即释放内存，也就是只需要存续到每个人都用完它就好。Rc就做这样的事情：确保引用在所有人都用完之后释放它，而且使用者不需要担心出现无法被追踪的引用或者忘记引用计数，这些都交给Rc来处理。
用例Link to headinguse std::rc::Rc; fn main() { let S = String::from(&amp;#34;Hello&amp;#34;); let mut rc = Rc::new(S); // 创建rc let p = rc.clone(); // 克隆一个引用 println!(&amp;#34;ref counter = {:?}&amp;#34;, Rc::strong_count(&amp;amp;rc)); // ref counter = 2 // rc指针拥有的值是不可变的，因此不可直接调用String的可变方法 // 通过全局方法获取rc的可变引用并解引用重新赋值，前提是ref counter == 1 // 若p存在，则下面方法会panic *Rc::get_mut(&amp;amp;mut rc).unwrap() = String::from(&amp;#34;World&amp;#34;); println!(&amp;#34;{:?}&amp;#34;, rc); // rc包裹的值为&amp;#34;World&amp;#34; } </description>
    </item>
    
    <item>
      <title>Cell and RefCell in Rust</title>
      <link>https://ptrzs3.github.io/posts/cell-and-refcell-in-rust/</link>
      <pubDate>Tue, 12 Mar 2024 17:15:34 +0800</pubDate>
      
      <guid>https://ptrzs3.github.io/posts/cell-and-refcell-in-rust/</guid>
      <description>参考文档：《Rust语言圣经》，《Rust程序设计（第2版）》
Cell和RefCell要解决的问题Link to heading对于Cell和RefCell所要解决的问题，上述两本资料解释不同，但含义相同：前者说 ”Rust 提供了 Cell 和 RefCell 用于内部可变性，简而言之，可以在拥有不可变引用的同时修改目标数据“；后者说”我们需要一个不可变值中的一丁点儿可变数据。……。Rust提供了多种可选方案，本节将讨论最直观的类型，即Cell&amp;lt;T&amp;gt;和RefCell&amp;lt;T&amp;gt;，……“。
我认为后者的解释更形象一点：对于某个大型的结构体，在运行时不需要对其做非常多的改动，只是需要偶尔改动其某个字段，并且无法将此结构体声明为mut类型，而只是拥有该结构体的不可变引用。在这种场景下，若需要对该结构体的不可变引用进行可变，则可以用Cell或RefCell解决。
需要注意的是，Cell和RefCell包裹的数据具有内部可变性，但这并不说明不可变引用和可变引用同时存在，也就是说并不能绕过Rust的所有权规则，尽管在编译时不会报错，但在运行时肯定会panic。
Cell和RefCell的异同Link to headingCell包裹的数据必须实现Copy trait，而RefCell并没有此限制。
Cell的get方法可以返回数据的拷贝，而RefCell的borrow方法返回数据的引用
// Cell，Cell包裹的数据都实现了Copy trait pub fn get(&amp;amp;self) -&amp;gt; T // RefCell，其中的Ref也暗示了返回引用 pub fn borrow(&amp;amp;self) -&amp;gt; Ref&amp;lt;&amp;#39;_, T&amp;gt; Cell不会panic，而RefCell会
用例Link to headinguse std::cell::Cell; pub struct Controller { …… counter: Cell&amp;lt;u32&amp;gt;, …… } impl Controller { …… fn counter_up(&amp;amp;self) { // 传入参数是不可变引用，而可通过Cell的特性实现可变 let n = self.counter.get(); self.counter.set(n + 1); } …… } use std::cell::RefCell; pub struct Library { …… log: RefCell&amp;lt;File&amp;gt;, …… } impl Library { …… fn logger(&amp;amp;self, msg: &amp;amp;str) { let mut log_file = self.</description>
    </item>
    
    <item>
      <title>Go包相关</title>
      <link>https://ptrzs3.github.io/posts/go%E5%8C%85%E7%9B%B8%E5%85%B3/</link>
      <pubDate>Tue, 12 Mar 2024 16:10:18 +0800</pubDate>
      
      <guid>https://ptrzs3.github.io/posts/go%E5%8C%85%E7%9B%B8%E5%85%B3/</guid>
      <description>Go包相关Link to headingmoduleLink to heading在Go语言中，一个module是许多相关的package的集合，可以用来与其他开发者共享并发布版本号。module本身被module根目录下的一个go.mod文件所定义。
packageLink to headingpackage是同一个文件夹下go源文件的集合。同一层级的go源文件，不允许有多个package，但是允许子package存在。
属于同一个package的go源文件，函数、变量等相互可见。不同的package要相互调用函数，需要通过import，且不允许循环import，即A import B，同时B也import A。
一个go module要编译成二进制文件，必须有main package存在，且main package中必须有main函数，这是程序的入口；否则该module是一个库。
import的是package而不是module
Go命名规范Link to headinggo源文件：小写字母+下划线
package：小写字母+下划线
变量：camelCase，如遇首个单词为缩写则CamelCase，如URLDecoder
常量：大写字母+下划线
接口、结构体、函数：若仅在package之内使用，则camelCase；如若需要对package之外公开，则CamelCase。这种方式相当于private和public的用法。</description>
    </item>
    
    <item>
      <title>Editorconfig</title>
      <link>https://ptrzs3.github.io/posts/editorconfig/</link>
      <pubDate>Fri, 08 Mar 2024 22:00:56 +0800</pubDate>
      
      <guid>https://ptrzs3.github.io/posts/editorconfig/</guid>
      <description>Intro.Link to headingEditorconfig解决团队在不同编辑器开发同一个项目导致的代码风格不一致的问题。
通过配置.editorconfig文件，编辑器自动读取配置，实现风格统一。
在某些编辑器上，不需要安装插件即可读取配置，如Vim、Visual Studio、PyCharm等。
在某些编辑器上，需要安装插件才能读取配置，如VS Code，Codeblocks等。
supported wildcardLink to headingSpecial Characters Matching * any string of characters, except path separators (/) ** any string of characters ? any single character, except path separators (/) [seq] any single character in seq [!seq] any single character not in seq {s1,s2,s3} any of the strings given (separated by commas, can be nested) (But {s1} only matches {s1} literally.</description>
    </item>
    
    <item>
      <title>Cow相关内容</title>
      <link>https://ptrzs3.github.io/posts/cow/</link>
      <pubDate>Fri, 08 Mar 2024 19:30:53 +0800</pubDate>
      
      <guid>https://ptrzs3.github.io/posts/cow/</guid>
      <description>Cow相关Link to headingRelated traitsLink to headingBorrowLink to headingpub trait Borrow&amp;lt;T&amp;gt; where T: ?Sized, { // Required method fn borrow(&amp;amp;self) -&amp;gt; &amp;amp;T; } BorrowMutLink to heading// 要求实现BorrowMut的类型必须先实现Borrow pub trait BorrowMut&amp;lt;Borrowed&amp;gt;: Borrow&amp;lt;Borrowed&amp;gt; where Borrowed: ?Sized, { // Required method fn borrow_mut(&amp;amp;mut self) -&amp;gt; &amp;amp;mut Borrowed; } trait继承：要求实现BorrowMut trait的类型也必须实现Borrow trait。trait继承是rust支持的唯一一种继承
ToOwnedLink to headingpub trait ToOwned { // 不是为类型起别名，而是要求Owned类型必须实现Borrow trait type Owned: Borrow&amp;lt;Self&amp;gt;; // Required method fn to_owned(&amp;amp;self) -&amp;gt; Self::Owned; // Provided method fn clone_into(&amp;amp;self, target: &amp;amp;mut Self::Owned) { .</description>
    </item>
    
    <item>
      <title>String、&amp;String、str和&amp;str</title>
      <link>https://ptrzs3.github.io/posts/string%E7%9B%B8%E5%85%B3/</link>
      <pubDate>Fri, 08 Mar 2024 09:28:53 +0800</pubDate>
      
      <guid>https://ptrzs3.github.io/posts/string%E7%9B%B8%E5%85%B3/</guid>
      <description>String、&amp;amp;String、str和&amp;amp;str简析Link to headingstrLink to headingstr是primitive type，即原始类型，是Rust语言级别上的唯一一种字符串类型。
str类型也称为字符串切片，常以其引用的形式&amp;amp;str出现（也就是字符串字面量，即&amp;amp;&#39;static str）。
Q：既然是static生命周期，为什么在结构体中还需要标注生命周期呢？
圣经：在存在多个引用时，编译器有时会无法自动推导生命周期，此时就需要我们手动去标注，通过为参数标注合适的生命周期来帮助编译器进行借用检查的分析。
str类型是动态尺寸类型（Dynamic Size Type），Rust中所有切片都是DST，包括[u8]，再推广为[T]。和u32类型对比，一个u32类型无论数值在u32允许的范围之间如何变化，u32占用的内存都是4字节，因此u32类型是定长类型，原则上是存放在栈区。而对于str，看下面这样的代码：
let str_a: &amp;amp;str = &amp;#34;Hello&amp;#34;; let str_b: &amp;amp;str = &amp;#34;I Love Rust&amp;#34;; 上述代码中，str_a的长度是5个字节，str_b的长度是11个字节，他们同属str类型，而因为赋值不同导致占用内存空间不同，因此说str是动态尺寸类型，无法存放在栈上。因此，使用str类型时，更多地是使用&amp;amp;str，也就是它的引用，也称为字符串切片的引用，但我们习惯直接称其为字符串切片。
但是出于方便，我们往往不会说使用切片引用，而是直接说使用字符串切片或数组切片，实际上，这时指代的都是切片的引用！（原文出处）
&amp;amp;strLink to heading引用一般是长度已知的，原则上是存放在栈区（目前还没有发现引用时DST的）。
&amp;amp;str 由两个部分组成：一个指向某些字节的指针和一个长度（查看原文）。
String和&amp;amp;StringLink to heading#[derive(PartialEq, PartialOrd, Eq, Ord)] #[stable(feature = &amp;#34;rust1&amp;#34;, since = &amp;#34;1.0.0&amp;#34;)] #[cfg_attr(not(test), lang = &amp;#34;String&amp;#34;)] pub struct String { vec: Vec&amp;lt;u8&amp;gt;, } String并不是Rust核心库的，只是标准库中一个公开的结构体。
在某些函数签名中使用&amp;amp;String类型（String的引用类型），建议更改为&amp;amp;str类型。
fn main() { let bar: String = String::from(&amp;#34;Hello&amp;#34;); foo(&amp;amp;bar); // Ok let baz: &amp;amp;str = &amp;#34;Hello&amp;#34;; foo(baz); // Error } fn foo(_: &amp;amp;String) {} // 将foo的签名改为&amp;amp;str，则baz也可以传递 // fn foo(_: &amp;amp;str) {} 通过上述代码，可以知道&amp;amp;String和&amp;amp;str是不等价的，且&amp;amp;str不能转换为&amp;amp;String，但&amp;amp;String却可以自动Deref为&amp;amp;str。</description>
    </item>
    
    <item>
      <title>Rust中的借用、引用与解引用</title>
      <link>https://ptrzs3.github.io/posts/rust%E4%B8%AD%E7%9A%84%E5%80%9F%E7%94%A8%E5%92%8C%E5%BC%95%E7%94%A8/</link>
      <pubDate>Fri, 08 Mar 2024 09:17:23 +0800</pubDate>
      
      <guid>https://ptrzs3.github.io/posts/rust%E4%B8%AD%E7%9A%84%E5%80%9F%E7%94%A8%E5%92%8C%E5%BC%95%E7%94%A8/</guid>
      <description>Rust中的借用、引用和解引用Link to heading标准库的介绍：https://rustwiki.org/zh-CN/std/keyword.ref.html（译文）| https://doc.rust-lang.org/std/keyword.ref.html （原版，有能力推荐读这个）
Rust book的介绍：https://rustwiki.org/zh-CN/book/ch04-02-references-and-borrowing.html
我们将创建一个引用的行为称为 借用（borrowing）
ref indicates that you want a reference to an unpacked value. （我理解为ref产出一个引用）
Case 0Link to heading// rustwiki: 我们将创建一个引用的行为称为 **借用**（*borrowing*） // 个人认为：在参数传递时，称其为引用或者借用都可 // 引用不侵占所有权，不变更数据的所有者 fn main() { let mut number: i32 = 5; flip(&amp;amp;mut number); println!(&amp;#34;number = {}&amp;#34;, number); } fn flip(para: &amp;amp;mut i32) { *para = -*para; } Case 1Link to headinglet ref a = 5; // &amp;amp;i32 let b = &amp;amp;5; // i32 assert_eq!</description>
    </item>
    
    <item>
      <title>MySQL</title>
      <link>https://ptrzs3.github.io/posts/%E6%95%B0%E6%8D%AE%E5%BA%93/</link>
      <pubDate>Thu, 07 Mar 2024 17:07:54 +0800</pubDate>
      
      <guid>https://ptrzs3.github.io/posts/%E6%95%B0%E6%8D%AE%E5%BA%93/</guid>
      <description>关系型数据模型中的数据依赖与范式Link to heading在关系数据库中每个关系都需要进行规范化，使之达到一定的规范化程度，从而提高数据的结构性、共享性、一致性和可操作性。关系模型原理的核心内容就是规范化概念，规范化是把数据库组织在保持存储数据完整性的同时最小化冗余数据的结构的过程。规范化的数据库必须符合关系模型的范式规则。范式可以防止在使用数据库时出现数据不一致的情况，并防止数据丢失。关系模型有第一范式、第二范式、第三范式和BCNF范式等，高级范式从属于低级范式。
第一范式
数据组的每个属性只能包含一个值 关系中的每个数组必须包含相同数量的值 关系中的每个数组一定不能相通 第二范式：在满足第一范式要求的基础上，要求每一条数据必须可以被唯一区分，及非主属性完全依赖于主关键字
第三范式：在满足第二范式要求的基础上，要求数据库表中不存在已被其他表包含的非主关键字信息
在实际工作中，将数据解规范化是通用的惯例，也就是违反范式，尤其是第二、第三范式，以提高性能或减少复杂性
MYSQL体系结构Link to headingMySQL体系结构如下图
Link to headingConnectors：与不同编程语言交互的接口 Connection Pool：管理缓冲用户连接、线程处理等需要缓存的需求 SQL INTerface：接受用户操作并返回结果 Parser：解析用户发来的sql语句并判断是否合法 Optimizer：SQL语句在查询之前会使用优化器对查询进行优化，使用“选取-投影-连接”策略进行查询 Caches &amp;amp; Buffers：查询缓存。如果缓存中有命中结果，则直接返回 Engine：存储引擎。从mysql5.5之后，InnoDB是mysql的默认引擎 数据库表创建Link to heading创建表
CREATE TABLE &amp;lt;table_name&amp;gt; ( &amp;lt;field&amp;gt; &amp;lt;type&amp;gt; [column CONSTRAINT] [default], [table CONSTRAINT] ); 使用表：use &amp;lt;table_name&amp;gt;;
查看所有表名称：SHOW tables；
主键约束
一个表中可以有一个或多个主键，即单字段主键和联合主键
/* 通过列级约束来指定主键 */ CREATE TABLE student ( /* 给id字段设置为从1开始自增*/ id INT(11) PRIMARY KEY AUTO_INCREMENT, name VARCHAR(255) not null, /*给score字段添加默认约束*/ score FLOAT default 0.</description>
    </item>
    
    <item>
      <title>ID3音乐标签</title>
      <link>https://ptrzs3.github.io/posts/id3%E6%A0%87%E7%AD%BE/</link>
      <pubDate>Thu, 07 Mar 2024 16:52:03 +0800</pubDate>
      
      <guid>https://ptrzs3.github.io/posts/id3%E6%A0%87%E7%AD%BE/</guid>
      <description>介绍Link to headingMP3文件中存在ID3标签，用于记录作者、歌曲名、歌词等信息。
ID3标签分为ID3v1和ID3v2，后者又细分为四个小版本，最常用的是ID3v2.3和ID3v2.4，支持2.4的解析器亦可解析2.3的内容，即向下兼容。
ID3v1Link to headingID3v1长度固定为128Bytes，存放于MP3文件末尾。
Bytes Index（start from 1) Length(Bytes) Contents Comments 1-3 3 TAG 固定的3字节长&amp;quot;TAG&amp;quot;，用于标识ID3v1 4-33 30 Title 歌曲名 34-63 30 Artist 歌手 64-93 30 Album 专辑 94-97 4 Year 年份 98-127 30 Comment 音乐评论 128 1 Genre 音乐流派 第98-127字节的内容，在ID3v1.1时更新了协议，如果第126字节为0，则表示第127字节为曲目序号，第98-125字节的内容为音乐评论信息；如果第126字节不为0，则30字节长度全部为音乐评论信息。
以《云烟成雨》为例，下图红色框区域即ID3v1协议内容
由于ID3v1协议存放的信息不多，且几乎无法扩展，因此出现ID3v2协议。
ID3v2Link to headingID3v2协议出现在MP3文件开头，若MP3文件开头三个字节为0x49 0x44 0x33，即&amp;quot;ID3&amp;quot;，说明该文件存在ID3v2协议信息。
协议框架Link to headingID3v2协议框架见下表
Contents Length(Bytes) Comments 首部 10 定长10字节，出现在文件最开头 扩展首部 变长 可选出现，由首部内容决定 标签帧 变长 存放歌名、作者、封面等信息 填充 变长 可选出现，如果出现，内容一定是0x00 脚注 10 定长10字节，可选出现，不能和填充一起出现，目前为ID3v2.</description>
    </item>
    
    <item>
      <title>Yaml格式</title>
      <link>https://ptrzs3.github.io/posts/yaml/</link>
      <pubDate>Thu, 07 Mar 2024 16:50:49 +0800</pubDate>
      
      <guid>https://ptrzs3.github.io/posts/yaml/</guid>
      <description>YAML Ain&amp;rsquo;t Markup LanguageLink to heading缩进几个空格字符不重要，同一层次的元素左侧要对齐
缩进不能使用Tab字符，一般缩进两个空格
可以增加空行以提升可读性
同一个文件中，可以用---分隔
...可用来表示文件结尾
数组：可用区块格式（短杠+空格表示起始），或者使用内置格式
--- # 最喜爱的电影 movies: - 肖申克的救赎 - 阿甘正传 - 霸王别姬 --- # 等价于 movies: [肖申克的救赎, 阿甘正传, 霸王别姬] 对象：键值对集合
--- # 区块格式 person: name: John Smith age: 33 --- # 内置格式 person: {name: John Smith, age: 33} 字符串：不需要包含在引号内
# 多行字符串，一种为保留换行（使用|字符） data: | There once was a man from Darjeeling Who got on a bus bound for Ealing It said on the door &amp;#34;Please don&amp;#39;t spit on the floor&amp;#34; So he carefully spat on the ceiling # 或者使用折叠换行（使用&amp;gt;字符） data: &amp;gt; Wrapped text will be folded into a single paragraph Blank lines denote paragraph breaks The newline character is \ # &amp;#39;\&amp;#39;表示下一行与本行是同一行 converted to a whitspace character 锚点和引用</description>
    </item>
    
    <item>
      <title>麻将</title>
      <link>https://ptrzs3.github.io/posts/%E9%BA%BB%E5%B0%86/</link>
      <pubDate>Thu, 07 Mar 2024 16:49:47 +0800</pubDate>
      
      <guid>https://ptrzs3.github.io/posts/%E9%BA%BB%E5%B0%86/</guid>
      <description>麻将Link to heading牌型组合Link to heading一饼~九饼各四张，共三十六张
一条~九条各四张，共三十六张（一条是一只鸟，也被成为幺鸡）
一万~九万各四张，共三十六张
上述108张为序数牌，四川麻将只用这108张
东风、南风、西风、北风、红中、发财、白板各四张，共28张，为字牌
上述136张牌也是最常用的麻将组合
春、夏、秋、冬、梅、兰、竹、菊共八张，为花牌
上述八张，国标麻将、福建麻将、台湾麻将会用到
术语Link to heading顺子：连续三张同花色的顺序依次的序数牌称为顺子，如三万、四万、五万
刻子：三张同样的牌叫刻子，如三张四饼
对子：两张同样的牌叫对子，如两张二饼
碰：其他三家丢的牌和已有的牌能组成一个刻子
吃：上家丢的牌和已有的牌能组成一个顺子
杠：已有一个刻子，上家丢的牌和刻子图案相同，即为杠。将这张牌和刻子摞在一起（实为四张牌，但认为是三张牌）。
和牌规则Link to heading麻将是凑牌的游戏，扔出一张没用的，拿进一张有用的牌
游戏过程Link to heading洗牌
砌牌：每个人36张牌，上下两张叠在一起为一墩，各自为18墩，砌成牌墙摆在自己面前（如果不用花牌，则每人十七墩）
掷骰子：掷骰子得到的点数n，决定从哪个人前面的牌墙抓牌。庄家为第一位，从庄家开始逆时针数。
取牌：从牌墙开始从右往左数n墩，这n墩不动。由庄家开始从第n+1墩开始取两墩，逆时针顺序继续取牌，直到庄家和闲家都取三墩共十二张牌。接着庄家继续取下图这两张牌：
接着闲家按逆时针各取一张牌，最终庄家14张，闲家13张牌
取牌完成后，将牌立起，不被别人看到
取牌完成后，庄家先出，扔出一张不要的牌（扔出的牌为明牌）而不摸牌；之后按逆时针顺序由闲家先从剩余的牌墙中按顺序取一张牌，或者用上家扔出的牌，之后扔出一张不要的牌；接下来按逆时针轮流进行。
在打牌过程中，会有碰、吃、杠的动作。碰、吃之后，把组成的三张牌组合并明牌放在左边，之后丢出一张牌。碰、吃、杠均为可选动作，是为了加快和牌动作并增加游戏的趣味性。
当游戏进行到一定程度时，己方只差一张牌即和牌，此时就进入“听牌”的状态，听牌需要报听，即对外宣布己方听牌。听牌状态，只能扔出摸到的牌。
如果摸到一张牌和了，即为自摸；如果靠收进别人的牌而和的，即为点和，扔出这张牌的人，即为点炮；如果别人扔出恰好需要的牌，而被别人收进，则为截和
Q：庄家如何确定？
A：第一句庄家掷骰子决定，此后庄家可轮流坐庄或胜者坐庄</description>
    </item>
    
    <item>
      <title>JSLint</title>
      <link>https://ptrzs3.github.io/posts/jslint/</link>
      <pubDate>Thu, 07 Mar 2024 16:47:51 +0800</pubDate>
      
      <guid>https://ptrzs3.github.io/posts/jslint/</guid>
      <description>ESLintLink to heading在语法层面规范代码，兼顾排版效果
安装Link to headingnpm install eslint -D 初始化Link to headingnpm init @eslint/config 按照提示进行初始化后，eslint的规则文件在.eslintrc.yml中。
eslintrc文件将在ESLint v9.0.0被弃用，转而使用eslint.config.js
配置对象详解Link to heading配置文件（eslintrc）中包含多个对象，如extends、parserOptions、rules等。
extendsLink to headingentends对象可以继承多个规则，但是可以在rules对象中覆盖其中某些规则
默认继承eslint: recommended，如果在开发其他类型项目如Vue，可以添加继承plugin:vue/vue3-strongly-recommended等规则。
parserOptionsLink to headingrulesLink to headingrules对象包含用户具体配置的规则，如
rules: quotes: - warn - single no-unused-vars: off eslint支持的所有规则：https://eslint.org/docs/latest/rules
执行Link to headingnpx eslint target.js CLI：npx eslint [options] [file|dir|glob]*
eslint所有命令行参数：https://eslint.org/docs/latest/use/command-line-interface
痛点Link to heading若要查看是否有不规范代码，需要重新执行命令并从命令行中分析，或者npx eslint --ext .</description>
    </item>
    
    <item>
      <title>A Story</title>
      <link>https://ptrzs3.github.io/disco/story/</link>
      <pubDate>Fri, 08 Dec 2023 12:36:43 +0800</pubDate>
      
      <guid>https://ptrzs3.github.io/disco/story/</guid>
      <description>少年时受的伤，要用一生的时间来恢复。
父母都是农民，家庭也确实不是富裕的家庭，但也算不上贫穷。
12年我上初一，家里还住着父母结婚时盖的土胚房，那时村里的其他人家，大部分都已经盖了砖房，看着那座老旧的土胚房和木栅栏门，我第一次感到自卑。初二的时候，父母拿出积蓄，在驻村干部的催促和忽悠下，也盖起了新砖房（之所以说忽悠，是因为驻村干部没有兑现许下的承诺）。初中住校，食宿费已经跟学费一起上交了，穿集上买的3、40一双的鞋子，每周5、6元零花钱，我总是有意无意关注同学们的消费水平：361，特步，耐克这些带牌子的运动鞋，每天傍晚学校小卖部开门就买一堆零食，每次周日返校也带着一些。而我没有，我计划着，每天傍晚去小卖部花一块钱买包零食，因为我不想别的同学在分享零食时我尴尬地看着而显得格格不入，我看着开胶的鞋子，再一次感觉到自卑。
高中也住校，吃饭用校园卡，高一的时候我总是最后几个到食堂，这样就可以偷偷吃别的同学剩下没有打扫的饭菜而不会被同学们看见让我感到不安，被阿姨们看见倒无所谓。高一入学被分配到重点班，有一次班主任唠嗑：他的女儿和朋友们玩，别人都有零食和玩具，而他的女儿没有，眼巴巴看着。他的女儿向他提起，他感到很心疼，每天多给女儿一些零花钱。我真的好羡慕他的女儿，有这样的一个爸爸。那时，我有了一个方向：如果我以后做爸爸，我绝不会让我的孩子因为钱感到自卑。后来，因为我自卑，怕受别人欺负，更怕受了欺负告诉妈妈反而被责怪，也怕惹是生非被叫家长给妈妈添麻烦，索性不好好学习上课睡觉谈恋爱，装出一副坏小的模样，就这样，高二被分配到了普通班。
高二的国庆节放假返校，我没有返校，反而是买了去市里的公交车票，我要辍学，去市里打工：花着父母交的学费，每天浑浑噩噩，我不配这份学费。很快，班主任的电话就打到了妈妈手里，知道我离家出走了。我被抓回家后，三姑六舅都来劝，我顶不住他们的压力，后来还是返校了，但我从来没跟妈妈说起我为什么要离家出走，她也许只是以为我淘气吧。高三前夕暑假，去烧烤店打工，下午两点到午夜两点，干了一个多月，挣了一千多块钱。
后来，出乎所有人意料，包括我，我考上大学了。大学四年四年，都是用国家助学贷款，但从来没有动过申请其他补助的念头。
再后来，大四，一心想着钱钱钱，本来笃定考研的念头被钱动摇了。意料之中的没考上，国家线都没过。
春招，图钱多，找了南方某城市的一份工作，找工作的事情尘埃落定了，此时还没正式毕业，拿着奖学金和其他乱七八糟攒的钱，买了一辆破车，我的第一辆车，也是家里第一辆车。有必要吗？有。我不想逢年过节走亲戚坐三轮车忍受北风凛冽，为了我莫须有的尊严，为了别人莫须有的异样的眼光，我必须要买。
工作了几个月，被现实打压，心里那个研究生的念头却愈发磅礴。我辞职了，跨专业考研，来到了山理工。我继续申请着国家助学贷款，粗略一算，七年国家助学贷款，毕业以后头上背的债务也不是个小数目了。
从初中起，妈妈就念叨着：家里挣钱不容易，你可省着点儿花啊。从妈妈第一次念叨开始，我就记在了心里，可能妈妈是怕我忘记吧，总是时不时地念叨，她已成了习惯，而我却没有听习惯，反而这些话愈发令我感觉刺耳，仿佛是一根深深扎进我心底，扎进我尊严的一根针。
24岁，我努力摆脱自卑，却总是被妈妈的一句话打回地狱。我辍学，打工，用国家助学贷款，买车，因为我知道家里不是富裕家庭，我知道父母挣钱不容易，他们曾经承受别人异样的眼光，被奚落，被嘲笑，但我却不想时不时听妈妈哭穷。
昨晚和妈妈通电话，妈妈再一次提醒我。
我不知该如何向妈妈开口，也不知该不该向妈妈开口。</description>
    </item>
    
    <item>
      <title>字符集</title>
      <link>https://ptrzs3.github.io/posts/%E5%AD%97%E7%AC%A6%E9%9B%86/</link>
      <pubDate>Mon, 30 Oct 2023 15:36:26 +0800</pubDate>
      
      <guid>https://ptrzs3.github.io/posts/%E5%AD%97%E7%AC%A6%E9%9B%86/</guid>
      <description>字符集Link to heading字符集（Character Set），是字符的集合。在Unicode出现之前，常用的字符集有ASCII，GB2312等。世界上有各种各样的语言，每种语言又有各自的字符，而诸如ASCII、GB2312等字符集具有很强的地区性，即只能表达特定地区常用的字符，如ASCII字符集就无法表示中文字符。
1994年，Unicode横空出世，它可以表达世界上已知的绝大多数字符，在这种字符环境下，不再存在语言的编码冲突，在同屏下，可以显示任意语言的字符，因此，Unicode也被称为万国码、统一码。由于Unicode出现比ASCII要晚，因此为了兼容ASCII文档，Unicode将ASCII吸收为子集，即0~127为原生ASCII码。Unicode只是定义了字符所对应的二进制数，而没有规定这些字符如何存储和传输。
Unicode默认版本是UCS-2，即采用定长两个字节来表示字符，取值范围为U+0000~U+FFFF，这样的范围足以表达全球主要语言的大多数字符。但是Unicode为了表示更多的字符，还提供了UCS-4，取值范围U+00000000～U+7FFFFFFF，可表达一百多万字符。
字符编码规则Link to headingUnicode常用的编码规则有UTF-8、UTF-16、UTF-32。
对比 UTF-8 UTF-16 UTF-32 UCS-2 UCS-4 编码空间 0 ~ 10FFFF 0 ~ 10FFFF 0 ~ 10FFFF 0 ~ FFFF 0 ~ 7FFFFFFF 最少编码字节数 1 2 4 2 4 最多编码字节数 4 4 4 2 4 是否依赖字节序 否 是 是 是 是 UCS是定长编码，这种编码方式最大的缺点就是浪费存储空间。对于字符“A”，如果用UCS-2来存储，则其需要占用两个字节，而用UCS-4来存储，则需要占用四个字节。UTF是可变长度的编码方式，它可以使用1~4个字节表示一个符号，根据不同的符号而变化字节长度。同样存储字符“A”，UTF-8只需要占用一个字节；对于汉字，比如“中”，UTF-8需要占用三个字节。
UTF-8的存储规则Link to heading以下是用来编码 UCS-2 的 UTF-8 子集：
字节 位数 最小十六进制值 最大十六进制值 二进制表示的字节序列 1 7 00000000 0000007F 0xxxxxxx 2 11 00000080 000007FF 110xxxxx 10xxxxxx 3 16 00000800 0000FFFF 1110xxxx 10xxxxxx 10xxxxxx 对于单字节的字符，字节的最高位二进制数设为0，后面7位为这个符号的 Unicode 码。因此对于英语字母，UTF-8 编码和最初的前128个ASCII标准码是完全相同的。 对于n字节的符号（n &amp;gt; 1），第一个字节的前n位都设为1，第n + 1位设为0，后面字节的前两位一律设为10。剩下的没有提及的二进制位，全部为这个符号的 Unicode 码 对于汉字“中”，Unicode编码为“4E2D”，转换成二进制是“100111000101101”。用UTF-8来表示需要占用三个字节：1110 0100 10 111000 10 101101，将每个字节转换为十进制即：228 184 173</description>
    </item>
    
    <item>
      <title>Screwyou</title>
      <link>https://ptrzs3.github.io/disco/screwyou/</link>
      <pubDate>Fri, 27 Oct 2023 21:56:56 +0800</pubDate>
      
      <guid>https://ptrzs3.github.io/disco/screwyou/</guid>
      <description>找对象不能只看脸
真的有很多傻逼</description>
    </item>
    
    <item>
      <title>Dream</title>
      <link>https://ptrzs3.github.io/disco/dream/</link>
      <pubDate>Mon, 23 Oct 2023 16:29:38 +0800</pubDate>
      
      <guid>https://ptrzs3.github.io/disco/dream/</guid>
      <description>DreamLink to heading立个小Flag，毕业三年后，换一辆W221.2 S500
V8有点夸张，但是如果要买的话，这可能是此生唯一的机会了</description>
    </item>
    
    <item>
      <title>Method</title>
      <link>https://ptrzs3.github.io/disco/rounddown/</link>
      <pubDate>Mon, 23 Oct 2023 16:12:34 +0800</pubDate>
      
      <guid>https://ptrzs3.github.io/disco/rounddown/</guid>
      <description>下取整Link to heading如果大家处理问题都采用计算机的思想的话，根本不存在犹豫和内耗这两个概念。
凡是可能犹豫的，也就是某个期望小于1的，都按false处理；只有期望等于1的时候，才去执行。
有些事情在犹豫，说明就是没有做好准备，或者是没有很强的执行意愿，却扔在这里不断地考虑、内耗，白白损耗自己的精力，最后即使是硬着头皮去执行了，结果也绝对是不尽人意
人啊，什么时候能认清自己</description>
    </item>
    
    <item>
      <title>Boom</title>
      <link>https://ptrzs3.github.io/disco/boom/</link>
      <pubDate>Sat, 21 Oct 2023 21:43:55 +0800</pubDate>
      
      <guid>https://ptrzs3.github.io/disco/boom/</guid>
      <description>我以为抓住了一根救命稻草
却发现，这根稻草，可能真的有人比我早抓住了
还不确定，但我的心已凉了半截
我的情感之路
总是事与愿违
是不是在为八年前的所作所为付出代价
此时我真的开始怀疑自己
我就像一个小丑
一直在舞台上表演
却从未意识到我自己，和观众的存在</description>
    </item>
    
    <item>
      <title>Death</title>
      <link>https://ptrzs3.github.io/disco/death/</link>
      <pubDate>Sat, 21 Oct 2023 19:28:22 +0800</pubDate>
      
      <guid>https://ptrzs3.github.io/disco/death/</guid>
      <description>今天听李健的《父亲写的散文诗》
看到歌词突然想起了奶奶
已经走了三年了
出殡的时候，我并没有很伤心，甚至没有流泪
我只是觉得，死亡就是个事实
当时听到唢呐的声音，想着人这一辈子，从喧闹中来，从喧闹中离去
只是，最后一次喧闹，是走向骨灰的伴奏，多少有些悲伤
好久没有想起奶奶了
三年前还是个活生生的人
现在呢，却成了田地里的一座坟墓
仍然记得奶奶的模样，也记得姥姥的模样
现在再想起奶奶，有些遗憾，有些想念
原来，人死之后，就再也见不到了</description>
    </item>
    
    <item>
      <title>Suagr</title>
      <link>https://ptrzs3.github.io/disco/suagr/</link>
      <pubDate>Sat, 21 Oct 2023 19:19:32 +0800</pubDate>
      
      <guid>https://ptrzs3.github.io/disco/suagr/</guid>
      <description>思你念你 问君知否Link to heading很矛盾，到底该不该去问
万一她有对象我这样问是不是很尴尬🤨
虽然已经想好了万一失败的借口，仍是不敢去问
🤐🤐🤐
“你有对象吗？”
有 =&amp;gt; 装模做样再问几个问题避免尴尬😢
没有 =&amp;gt; “是没有遇到心仪的对象还是？”
​	“是相信一见钟情还是日久生情？”
​	“你认为恋爱关系保鲜的秘诀是什么？”
​	“你觉得一个健康恋爱关系的前提是什么？” （我认为是彼此平等，彼此尊重）
​	“是怎样评价异性的？”
​	“你希望理想的恋爱对象是什么样的？”
​	“现在有一个成功概率不高的任务，成功和失败的代价都很高，对于失败和放弃这两个选择，你更厌恶哪一个？”（我更厌恶放弃，因为连失败的资格都没有）</description>
    </item>
    
    <item>
      <title>Jabber</title>
      <link>https://ptrzs3.github.io/disco/jabber/</link>
      <pubDate>Wed, 18 Oct 2023 21:34:14 +0800</pubDate>
      
      <guid>https://ptrzs3.github.io/disco/jabber/</guid>
      <description>工位上一坐就是一天，跟电脑大眼瞪小眼
坐得腰疼😫
妈的，想谈恋爱☹☹我说真的
有稀罕的女孩，但是……不敢去主动多接触，怕被当精神病
嗨，坚强，不哭，把孤独变成朋友吧，这样就不会无聊了😀</description>
    </item>
    
    <item>
      <title>Rust里的小东西</title>
      <link>https://ptrzs3.github.io/posts/rust%E9%87%8C%E7%9A%84%E5%B0%8F%E4%B8%9C%E8%A5%BF/</link>
      <pubDate>Wed, 18 Oct 2023 21:28:06 +0800</pubDate>
      
      <guid>https://ptrzs3.github.io/posts/rust%E9%87%8C%E7%9A%84%E5%B0%8F%E4%B8%9C%E8%A5%BF/</guid>
      <description>Rust中常用的小东西Link to headingResultLink to heading在不同的模块中有不同的Result定义，但都是std::result::Result的包装。
std::result::ResultLink to headingpub enum Result&amp;lt;T, E&amp;gt; { Ok(T), Err(E), } std::io::ResultLink to headingpub type Result&amp;lt;T&amp;gt; = Result&amp;lt;T, Error&amp;gt;; 其中Error：
pub struct Error { repr: Repr, } std::fmt::ResultLink to headingpub type Result = Result&amp;lt;(), Error&amp;gt;; 其中Error：
pub struct Error; std::thread::ResultLink to headingpub type Result&amp;lt;T&amp;gt; = Result&amp;lt;T, Box&amp;lt;dyn Any + Send + &amp;#39;static&amp;gt;&amp;gt;; ErrorLink to headingstd::error::ErrorLink to headingpub trait Error: Debug + Display { fn source(&amp;amp;self) -&amp;gt; Option&amp;lt;&amp;amp;(dyn Error + &amp;#39;static)&amp;gt; { .</description>
    </item>
    
    <item>
      <title>Fancy</title>
      <link>https://ptrzs3.github.io/disco/fancy/</link>
      <pubDate>Sat, 14 Oct 2023 12:18:46 +0800</pubDate>
      
      <guid>https://ptrzs3.github.io/disco/fancy/</guid>
      <description>欢迎光临人来人往的银河迪厅
这里没有悲伤 只有我和你
光影游过你侧脸 轮廓太美丽
无限延伸的夜里 别再垂头丧气</description>
    </item>
    
    <item>
      <title>Hadoop集群搭建</title>
      <link>https://ptrzs3.github.io/posts/hadoop/</link>
      <pubDate>Fri, 13 Oct 2023 20:56:12 +0800</pubDate>
      
      <guid>https://ptrzs3.github.io/posts/hadoop/</guid>
      <description>本文说明Link to heading本文参考《Hadoop大数据实战权威指南（第2版）》（ISBN 978-7-121-37033-5）撰写，有任何问题以原书为准；
本文的网络发布地址在这里，有任何更新将在这里发布；
本文所需要的安装包等内容在这里查看，如失效请发邮件联系作者；
本文中所涉及shell命令，请根据实际环境进行修改，且不保证编写无误；
文末所述销售数据分析系统的构建结果请看这个视频
前置内容Link to headingMarkdownLink to heading什么是MarkdownLink to headingMarkdown是一种轻量级标记语言，创始人为约翰·格鲁伯。它允许人们使用易读易写的纯文本格式编写文档，然后转换成有效的XHTML（或者HTML）文档。这种语言吸收了很多在电子邮件中已有的纯文本标记的特性。
由于Markdown的轻量化、易读易写特性，并且对于图片，图表、数学式都有支持，目前许多网站都广泛使用Markdown来撰写帮助文档或是用于论坛上发表消息。如GitHub、Reddit、CSDN、简书等，甚至还能被用来撰写电子书。
为什么使用MarkdownLink to heading专注于内容而不是形式 纯文本格式，兼容性强 格式转换方便 Markdown语法示例Link to heading直接插入图片（建议使用图床上传）
插入代码块
fn main() { println!(&amp;#34;Hello, world!&amp;#34;); } #include &amp;lt;stdio.h&amp;gt; int main(void) { printf(&amp;#34;Hello, World!&amp;#34;); return 0; } 插入数学公式 $$ f(x_1,x_2,\ldots,x_n) = \left({1 \over x_1}\right)^2+\left({1 \over x_2}\right)^2+\cdots+\left({1 \over x_n}\right)^2 $$
图床Link to heading在Markdown文档中插入图片，其实存储在文档中的是图片的路径，而不是图片本身。所以如果只将Markdown文件本身分享出去而没有打包本地图片的话，文档中的图片就无法显示。因此有一种通用的做法是将图片上传到公网，在Markdown中插入图片时使用公网路径，这样只要有网络连接，Markdown中的图片都可以显示。这个存储图片的地址就是图床。一般来说上传到图床的图片不应该是私密信息，因为图床是公开访问权限的。为了使用方便，有软件比如PicGo实现了将本地图片添加到Markdown文档后，自动将图片上传到图床，并将图片路径替换为网络路径。</description>
    </item>
    
    <item>
      <title>Rust命令行解析程序：Clap</title>
      <link>https://ptrzs3.github.io/posts/clap/</link>
      <pubDate>Fri, 13 Oct 2023 20:54:44 +0800</pubDate>
      
      <guid>https://ptrzs3.github.io/posts/clap/</guid>
      <description>Rust命令行解析程序：ClapLink to heading基于Clap 4.4.6
参考资料：Clap官方手册
Chapter 1Link to heading配置解析器Link to heading使用Command结构体的new方法构建解析器：
// arg.exe use clap::{arg, Command}; fn main() { // 只要调用clap解析命令行参数，--help和--version会自动添加到命令行参数列表中 // 使用arg!宏定义了两个命令行参数：two, one let matches = Command::new(&amp;#34;MyApp&amp;#34;) .version(&amp;#34;1.0&amp;#34;) .author(&amp;#34;Kevin K. &amp;lt;kbknapp@gmail.com&amp;gt;&amp;#34;) .about(&amp;#34;Does awesome things&amp;#34;) .arg(arg!(--two &amp;lt;VALUE&amp;gt;).required(true)) .arg(arg!(--one &amp;lt;VALUE&amp;gt;).required(true)) .get_matches(); println!( &amp;#34;two: {:?}&amp;#34;, matches.get_one::&amp;lt;String&amp;gt;(&amp;#34;two&amp;#34;).expect(&amp;#34;required&amp;#34;) ); println!( &amp;#34;one: {:?}&amp;#34;, matches.get_one::&amp;lt;String&amp;gt;(&amp;#34;one&amp;#34;).expect(&amp;#34;required&amp;#34;) ); } 用法：
arg.exe --two foo --one bar：两个参数分别对应foo和bar arg.exe -h 或 arg.exe --help：输出帮助信息 arg.exe -v 或 arg.</description>
    </item>
    
    <item>
      <title>VSCode配置C&#43;&#43;开发环境（MSVC）</title>
      <link>https://ptrzs3.github.io/posts/vscode/</link>
      <pubDate>Fri, 13 Oct 2023 20:53:22 +0800</pubDate>
      
      <guid>https://ptrzs3.github.io/posts/vscode/</guid>
      <description>前置知识Link to heading这些内容如果感兴趣可以看一下，不看也不妨碍配置环境，因为我会一步步教你配置。（但我希望你还是看一下，毕竟我写了好久🤣）
C/C++编译器有哪些Link to heading注意我们说的是编译器，而不是集成开发环境（IDE，Integrated Development Environment）。我们平常用的Codeblocks，Visual Studio Code，Dev C++等软件都是开发环境，而不是编译器。
常用的C/C++编译器（更确切地说是编译器套件）有：GCC、MinGW、MSVC等。不同的编译器附有不同的库文件，如果某段代码只用了标准库，那么这段代码很可能用任意C/C++编译器都可以编译通过；而如果某段代码用了特定编译器独有的库文件，那这段代码很可能只能用特定编译器才能编译通过，甚至对该编译器的版本也有要求。
Windows系统的环境变量Link to heading什么是环境变量Link to heading​	环境变量是在操作系统中一个具有特定名字的对象，它包含了一个或者多个应用程序所将使用到的信息（不好理解）。
​	按照下面的方式查看Windows 10的环境变量
​	可以看到环境变量分为两部分：用户变量和系统变量
用户变量：只对当前用户生效，优先级高于系统变量 系统变量：对所有用户生效 ​	你也可以将环境变量理解为一个指针。我们在环境变量中定义一个名为“JAVA_HOME”的变量，它指向jdk的安装目录。在某段代码中你可能经常使用jdk作为参数，但如果jdk的安装目录变了，怎么办？你在程序中如果直接使用jdk的绝对路径，那你就从代码中找出来一个个地改吧；而如果你在程序中使用JAVA_HOME这个环境变量，当jdk的安装目录发生变化时，你只要改一下JAVA_HOME的内容即可，而你的代码无需任何修改，因为你的代码使用的是JAVA_HOME，而不是jdk的绝对路径。
​	想象这样一个场景：你编写了一个个性化的计算器软件，软件的路径为：D:\softwares\myself\calc.exe
​	当你每次启动时，要么用文件管理器找到这个软件双击运行，要么通过命令行D:\softwares\myself\calc.exe执行。诚然，这两种方式耗费精力都差不多，因为calc.exe并没有位于很深层的目录下。那如果calc.exe位于第10层，甚至第100层目录呢，是不是每次打开这个软件很费劲？因为你要么需要打开100层文件夹，要么在命令行输入calc.exe的路径，都是很费劲的方法（当然你可以创建快捷方式，但我们先不考虑这种方法）。
​	这时候，你就可以把calc.exe所在的目录添加到用户变量的Path变量下（你也可以添加到系统变量的Path下，这样就对所有用户生效了），这样每次执行calc.exe都不需要在命令行中输入那么一长串路径，而只需要输入calc.exe或者calc即可。
Path环境变量Link to heading​	Path是个很重要的环境变量，他里面存储的一般是一系列可执行文件的目录。
​	下图所示是系统变量中的Path存储的内容，每一行代表一个目录，许多目录都是以“bin”（binary的缩写）结尾，代表该目录下存储了一些二进制的可执行文件。执行这些目录下的可执行文件不需要加一长串的路径，只需要在命令行输入可执行文件的名称即可。
其他环境变量Link to heading​	比如我们前面提到的“JAVA_HOME”环境变量，这其实就是一个普通的环境变量。你可以随便定义自己的环境变量，比如isjks：wwoqsi。你可以在命令行中执行echo %isjks%，会输出wwoqsi。当然这个并没有任何意义，我只是告诉你你可以随便定义自己的环境变量，无论这个变量有没有什么用。
​	在上面一张图中，我们发现有些被百分号“%”包裹起来的东西，这些被包裹起来的，其实是已经定义的环境变量。比如SystemRoot的内容就是“C:\WINDOWS”。有些环境变量并没有在环境变量列表中被列出来，因此无法直接看到它的值。如果你对任何环境变量感兴趣，可以在命令行中执行echo %&amp;lt;ENV_VAR&amp;gt;%来查看它代表的内容。
安装Visual Studio CodeLink to heading​	这个没有难度，自己安装即可。vscode安装完成后会把自己加到环境变量，提示需要重启一下电脑。
安装VIsual Studio及相关附件Link to heading​	在这里下载installer，选择社区版即可。</description>
    </item>
    
    <item>
      <title>Git基础</title>
      <link>https://ptrzs3.github.io/posts/git/</link>
      <pubDate>Fri, 13 Oct 2023 20:52:20 +0800</pubDate>
      
      <guid>https://ptrzs3.github.io/posts/git/</guid>
      <description>GitLink to headingGit的配置信息Link to heading使用git config命令对Git做一些配置。
Git的配置文件等级Link to headingGit的配置文件有三个，分别对应不同的影响等级：
Linux下
/etc/gitconfig：包含系统上每个用户及他们仓库的通用配置，使用git config --system更改
~/.gitconfig 或 ~/.config/git/config：针对当前用户的配置文件，使用git config --global修改
.git/config：针对当前仓库的配置文件，使用git config修改
Windows下
$Git/etc/gitconfig $HOME/.gitconfig .git/config 读取配置时优先读取当前仓库的配置，如果没有就往上找
修改Git配置Link to heading修改全局配置：git config --global user.name &amp;quot;zhangsan&amp;quot; 查看当前的Git配置Link to headinggit config --list
Git基础Link to heading初始化Git仓库Link to heading将当前目录初始化为Git仓库：git init
如果当前目录中已经有一些文件存在，使用git add &amp;lt;filename&amp;gt;来跟踪某个文件即将其提交到暂存区，或者git add .跟踪当前目录所有文件并提交到暂存区
克隆已有的仓库Link to heading克隆github上某个仓库：git clone &amp;lt;url&amp;gt;</description>
    </item>
    
  </channel>
</rss>
